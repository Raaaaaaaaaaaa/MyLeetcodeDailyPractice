public int maxTurbulenceSize(int[] arr) {
        if(arr.length == 1){
            return 1;
        }else if(arr.length == 0){
            return 0;
        }
        //判断是否为一个新的子集
        boolean newSub = true;
        //记录是否比后面大
        boolean nextIsBigger = false;
        //记录最大的湍流数组长度
        int maxLen = 1;
        //定义左右边界
        int leftPtr = 0,rightPtr = 1;
        while (rightPtr < arr.length) {
            //判断是否为新的子集
            if (newSub) {
                //判断是否为大于开头
                if (arr[rightPtr - 1] > arr[rightPtr]) {
                    nextIsBigger = false;
                 //判断是否为小于开头
                } else if (arr[rightPtr - 1] < arr[rightPtr]) {
                    nextIsBigger = true;
                } else {
                    //相等的情况,向前推进
                    leftPtr++;
                    rightPtr++;
                    //重新作为新的子集判断
                    continue;
                }

                rightPtr++;
                newSub = false;
            } else {
                if (arr[rightPtr - 1] < arr[rightPtr] && nextIsBigger == false) {
                    rightPtr++;
                    nextIsBigger = true;
                } else if (arr[rightPtr - 1] > arr[rightPtr] && nextIsBigger == true) {
                    rightPtr++;
                    nextIsBigger = false;
                } else {
                    maxLen = Math.max(maxLen,rightPtr - leftPtr);
                    //上面left自增了一次，得减回来
                    leftPtr = rightPtr-1;
                    newSub = true;

                    //如果最大值已经大于数组长度的一半，直接返回
                    if(maxLen > arr.length / 2){
                        return maxLen;
                    }
                }
            }
        }

        //跳出循环后更新maxLen
        maxLen = Math.max(maxLen,rightPtr - leftPtr);

        return maxLen;
    }
